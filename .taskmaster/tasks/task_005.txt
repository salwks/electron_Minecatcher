# Task ID: 5
# Title: 타이머 및 지뢰 카운터 구현
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: 게임 시작 시 타이머를 작동시키고, 남은 지뢰 수를 표시하는 기능을 구현한다.
# Details:
1. 타이머 및 지뢰 카운터 관련 변수 추가:
```javascript
class MinesweeperGame {
  constructor(rows = 9, cols = 9, mineCount = 10) {
    // 기존 코드 유지...
    this.timer = 0;
    this.timerInterval = null;
    this.flagCount = 0;
  }
  
  // 타이머 시작
  startTimer() {
    if (this.timerInterval) return;
    
    const timerElement = document.querySelector('.timer');
    this.timer = 0;
    timerElement.textContent = this.timer;
    
    this.timerInterval = setInterval(() => {
      this.timer++;
      timerElement.textContent = this.timer;
      
      // 999초 제한 (기존 지뢰찾기 게임과 동일)
      if (this.timer >= 999) {
        clearInterval(this.timerInterval);
      }
    }, 1000);
  }
  
  // 타이머 정지
  stopTimer() {
    if (this.timerInterval) {
      clearInterval(this.timerInterval);
      this.timerInterval = null;
    }
  }
  
  // 게임 리셋 시 타이머도 리셋
  reset() {
    // 기존 코드 유지...
    this.stopTimer();
    this.timer = 0;
    document.querySelector('.timer').textContent = '0';
    document.querySelector('.mine-counter').textContent = this.mineCount;
  }
  
  // revealCell 메서드 수정 - 첫 클릭 시 타이머 시작
  revealCell(row, col) {
    // 이미 게임이 끝났거나, 이미 열린 셀이거나, 깃발이 꽂힌 셀이면 무시
    if (this.gameOver || this.board[row][col].isRevealed || this.board[row][col].isFlagged) {
      return;
    }
    
    // 첫 클릭인 경우 지뢰 배치 및 타이머 시작
    if (this.firstClick) {
      this.placeMines(row, col);
      this.startTimer();
    }
    
    // 기존 코드 유지...
    
    // 게임 오버 또는 승리 시 타이머 정지
    if (result === 'gameover' || result === 'win') {
      this.stopTimer();
    }
    
    return result;
  }
}
```

2. 지뢰 카운터 초기화 및 업데이트:
```javascript
// 초기 렌더링 시 지뢰 카운터 설정
document.addEventListener('DOMContentLoaded', () => {
  renderBoard();
  document.querySelector('.mine-counter').textContent = game.mineCount;
  document.querySelector('.timer').textContent = '0';
  
  // 이벤트 리스너 등록...
});

// 재시작 버튼 이벤트 핸들러 추가
document.getElementById('restart-btn').addEventListener('click', () => {
  game.reset();
  renderBoard();
  document.getElementById('restart-btn').textContent = '😊';
});
```

# Test Strategy:
1. 첫 클릭 시 타이머가 시작되는지 확인
2. 타이머가 1초마다 정확히 증가하는지 확인
3. 게임 오버 또는 승리 시 타이머가 정지되는지 확인
4. 재시작 시 타이머가 0으로 리셋되는지 확인
5. 지뢰 카운터가 초기에 총 지뢰 수를 표시하는지 확인
6. 깃발을 꽂거나 제거할 때 지뢰 카운터가 정확히 업데이트되는지 확인

# Subtasks:
## 1. HTML 구조 구현 및 UI 요소 추가 [pending]
### Dependencies: None
### Description: 타이머와 지뢰 카운터를 표시할 HTML 요소를 구현하고 게임 UI에 추가한다.
### Details:
1. HTML 파일에 타이머와 지뢰 카운터를 표시할 요소 추가
2. 타이머(.timer)와 지뢰 카운터(.mine-counter) 클래스를 가진 요소 생성
3. 게임 컨트롤 패널 내에 요소들을 배치
4. 재시작 버튼(#restart-btn)도 함께 배치
5. 기본 스타일링 적용하여 게임 상단에 정보 패널 형태로 표시

## 2. 타이머 기능 구현 [pending]
### Dependencies: None
### Description: 게임 시작 시 타이머를 작동시키고 시간을 초 단위로 표시하는 기능을 구현한다.
### Details:
1. MinesweeperGame 클래스에 timer, timerInterval 변수 추가
2. startTimer() 메서드 구현: setInterval을 사용하여 1초마다 타이머 증가
3. stopTimer() 메서드 구현: clearInterval을 사용하여 타이머 중지
4. 타이머가 999초에 도달하면 자동으로 중지되도록 구현
5. 타이머 값을 DOM에 표시하는 로직 구현

## 3. 지뢰 카운터 기능 구현 [pending]
### Dependencies: None
### Description: 남은 지뢰 수를 표시하고 깃발을 설치/제거할 때마다 카운터를 업데이트하는 기능을 구현한다.
### Details:
1. MinesweeperGame 클래스에 flagCount 변수 추가
2. toggleFlag() 메서드 수정: 깃발 설치/제거 시 flagCount 업데이트
3. 남은 지뢰 수(mineCount - flagCount) 계산 로직 구현
4. 지뢰 카운터 DOM 요소 업데이트 로직 추가
5. 음수 값도 표시할 수 있도록 구현(깃발을 실제 지뢰보다 많이 설치한 경우)

## 4. 게임 상태 변경 시 타이머 제어 기능 구현 [pending]
### Dependencies: None
### Description: 게임 시작, 종료, 승리, 재시작 등 상태 변경 시 타이머를 적절히 제어하는 기능을 구현한다.
### Details:
1. revealCell() 메서드 수정: 첫 클릭 시 타이머 시작 로직 추가
2. 게임 오버 또는 승리 시 타이머 정지 로직 추가
3. reset() 메서드 수정: 타이머 초기화 및 정지 로직 추가
4. 재시작 버튼 클릭 시 타이머 리셋 로직 구현
5. 게임 상태에 따라 타이머 동작을 제어하는 조건문 추가

## 5. 이벤트 핸들러 및 초기화 로직 통합 [pending]
### Dependencies: None
### Description: 타이머와 지뢰 카운터 기능을 게임의 다른 부분과 통합하고 초기화 로직을 구현한다.
### Details:
1. DOMContentLoaded 이벤트 핸들러에 타이머와 지뢰 카운터 초기화 코드 추가
2. 게임 보드 렌더링 함수와 타이머/카운터 업데이트 로직 연결
3. 재시작 버튼 이벤트 핸들러에 타이머/카운터 리셋 로직 추가
4. 게임 난이도 변경 시 타이머/카운터 초기화 로직 구현
5. 모든 게임 상태 변화에 따른 UI 업데이트 로직 통합

